// GtkSharp.Generation.GenerationInfo.cs - Generation information class.
//
// Author: Mike Kestner <mkestner@ximian.com>
//
// Copyright (c) 2003-2008 Novell Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the GNU General Public
// License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

using System;
using System.IO;
using System.Xml;

namespace GapiCodegen
{
    /// <summary>
    /// Stores info passed in on the command line, such as the assembly name and glue library name.
    /// </summary>
    public class GenerationInfo
    {
        string abicfile;
        string abicsfile;

        public GenerationInfo(XmlElement ns)
        {
            string ns_name = ns.GetAttribute("name");
            char sep = Path.DirectorySeparatorChar;
            Dir = ".." + sep + ns_name.ToLower() + sep + "generated";
            AssemblyName = ns_name.ToLower() + "-sharp";
        }

        public GenerationInfo(string dir, string assembly_name) :
            this(dir, assembly_name, "", "", "", "", "", "")
        { }

        public GenerationInfo(string dir, string assembly_name, string glue_filename,
                string glue_includes, string gluelib_name, string abi_c_file,
                string abi_cs_file, string abi_cs_usings)
        {
            Dir = dir;
            AssemblyName = assembly_name;
            GluelibName = gluelib_name;
            abicfile = abi_c_file;
            abicsfile = abi_cs_file;
            InitializeWriters(glue_filename, glue_includes, gluelib_name, abi_cs_usings);
        }

        private void InitializeWriters(string glue_filename, string glue_includes, string gluelib_name,
                string abi_cs_usings)
        {
            FileStream stream;

            if (gluelib_name != string.Empty && glue_filename != string.Empty)
            {
                try
                {
                    stream = new FileStream(glue_filename, FileMode.Create, FileAccess.Write);
                }
                catch (Exception)
                {
                    Console.Error.WriteLine("Unable to create specified glue file.  Glue will not be generated.");
                    return;
                }

                GlueWriter = new StreamWriter(stream);

                GlueWriter.WriteLine("// This file was generated by the Gtk# code generator.");
                GlueWriter.WriteLine("// Any changes made will be lost if regenerated.");
                GlueWriter.WriteLine();

                if (glue_includes != "")
                {
                    foreach (var header in glue_includes.Split(',', ' '))
                    {
                        if (header != "")
                            GlueWriter.WriteLine("#include <{0}>", header);
                    }

                    GlueWriter.WriteLine("");
                }

                GlueEnabled = true;
            }

            if (CAbiWriter != null || abicfile == "" || abicsfile == "" || abi_cs_usings == "") return;

            stream = new FileStream(abicfile, FileMode.Create, FileAccess.Write);

            CAbiWriter = new StreamWriter(stream);
            CAbiWriter.WriteLine("// This file was generated by the Gtk# code generator.");
            CAbiWriter.WriteLine("// Any changes made will be lost if regenerated.");
            CAbiWriter.WriteLine();

            if (glue_includes != "")
            {
                foreach (var header in glue_includes.Split(',', ' '))
                {
                    if (header != "")
                        CAbiWriter.WriteLine("#include <{0}>", header);
                }

                CAbiWriter.WriteLine("");
            }

            CAbiWriter.WriteLine("int main (int argc, char *argv[]) {");

            stream = new FileStream(abicsfile, FileMode.Create, FileAccess.Write);

            AbiWriter = new StreamWriter(stream);
            AbiWriter.WriteLine("// This file was generated by the Gtk# code generator.");
            AbiWriter.WriteLine("// Any changes made will be lost if regenerated.");
            AbiWriter.WriteLine();

            var name = "";

            foreach (var _using in abi_cs_usings.Split(',', ' '))
            {
                if (_using == "") continue;

                AbiWriter.WriteLine("using {0};", _using);
                if (name == "")
                    name = _using;
            }

            AbiWriter.WriteLine("using System;");
            AbiWriter.WriteLine();
            AbiWriter.WriteLine("namespace AbiTester {");
            AbiWriter.WriteLine("\tclass ___" + name + " {");
            AbiWriter.WriteLine("\t\tpublic static void Main (string[] args) {");
        }

        public string AssemblyName { get; }

        public StreamWriter AbiWriter { get; private set; }

        public StreamWriter CAbiWriter { get; private set; }

        public string Dir { get; }

        public string GluelibName { get; }

        public bool GlueEnabled { get; private set; }

        public StreamWriter GlueWriter { get; private set; }

        public StreamWriter Writer { get; set; }

        public void CloseWriters()
        {
            GlueWriter?.Close();

            if (CAbiWriter == null) return;

            CAbiWriter.WriteLine("\treturn 0;");
            CAbiWriter.WriteLine("}");
            CAbiWriter.Close();

            AbiWriter.WriteLine("\t\t}");
            AbiWriter.WriteLine("\t}");
            AbiWriter.WriteLine("}");
            AbiWriter.Close();
        }

        private string _member;

        public string CurrentMember
        {
            get => CurrentType + "." + _member;
            set => _member = value;
        }

        public string CurrentType { get; set; }

        public StreamWriter OpenStream(string name, string namespce)
        {
            string gen_dir = Path.Combine(Dir, namespce);
            Directory.CreateDirectory(gen_dir);

            string filename = Path.Combine(gen_dir, name + ".cs");

            var stream = new FileStream(filename, FileMode.Create, FileAccess.Write);
            var sw = new StreamWriter(stream);

            sw.WriteLine("// This file was generated by the Gtk# code generator.");
            sw.WriteLine("// Any changes made will be lost if regenerated.");
            sw.WriteLine();

            return sw;
        }
    }
}
